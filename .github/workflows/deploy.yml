name: deploy
'on':
  push:
    branches:
      - main
      - v[0-9]+(\.[0-9]+)? # only major.minor 
      - test-ci
env:
  CI: true
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  INSIDERS_TOKEN: ${{ secrets.INSIDERS_TOKEN }}
  PYTHON_VERSION: 3.x
  POETRY_VERSION: 1.8.3
  # NOTE: insiders version must correspond to the mkdocs-material version in pyproject.toml
  #       and must be updated in all .yml files in this directory
  INSIDERS_VERSION: 9.5.47-insiders-4.53.14
  JUVIX_VERSION: v0.6.8
  GIT_COMMITTER_EMAIL: arts@heliax.dev
  GIT_COMMITTER_NAME: Anoma Research
  REPORT_TODOS: false
  SHOW_TODOS_IN_MD: false
  BRANCH_NAME: ${{ github.head_ref || github.ref_name }}
concurrency:
  group: "${{ github.workflow }}-${{ github.head_ref || github.run_id }}"
  cancel-in-progress: true
permissions:
  contents: write
jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4.2.0
        with:
          submodules: true
          fetch-depth: 0
      - run: |
          git config --global user.name 'Anoma Research'
          git config --global user.email 'arts@heliax.dev'
      - name: comment on PR
        run: gh $GH_FLAGS --edit-last --body "$MSG" || gh $GH_FLAGS --body "$MSG" || true
        env:
          MSG: "The build is in progress. Please wait for the preview link."
          GH_FLAGS: pr -R anoma/nspec comment ${{ github.event.pull_request.number }}
      - name: Install the right Juvix for the Specs
        uses: jaxxstorm/action-install-gh-release@v1.12.0
        with:
          repo: anoma/juvix
          tag: ${{ env.JUVIX_VERSION }}
          cache: enable
          rename-to: juvix
          chmod: 0755
      - uses: actions/cache@v4.0.2
        with:
          key: juvix-cache-${{ hashFiles('**/*.juvix.md') }}-${{ hashFiles('**/*.juvix') }}
          path: .juvix-build
          restore-keys: |
            juvix-cache-
      - name: typecheck docs
        continue-on-error: true
        run: |
          juvix typecheck docs/everything.juvix.md
      - name: Install Python
        uses: actions/setup-python@v5.2.0
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install Poetry
        uses: abatilo/actions-poetry@v3.0.0
        with:
          poetry-version: ${{ env.POETRY_VERSION }}
      - name: Setup a local virtual environment (if no poetry.toml file)
        run: |
          poetry config virtualenvs.create true --local
          poetry config virtualenvs.in-project true --local
      - run: echo "cache_id=$(date --utc '+%V')-${{ hashFiles( '**/poetry.lock' )}}-${{ hashFiles( '**/*.py' )}}" >> $GITHUB_ENV
      - name: Cache .cache
        uses: actions/cache@v4.0.2
        with:
          key: mkdocs-material-${{ env.cache_id }}
          path: .cache
          restore-keys: |
            mkdocs-material-
      - name: Cache .cache-juvix-mkdocs
        uses: actions/cache@v4.0.2
        with:
          key: cache-juvix-mkdocs-${{ env.cache_id }}
          path: .cache-juvix-mkdocs
          restore-keys: |
            cache-juvix-mkdocs-
      - name: Install Linux dependencies
        run: sudo apt-get install -y libcairo2-dev libfreetype6-dev libffi-dev libjpeg-dev libpng-dev libz-dev pngquant graphviz
      - name: Install Python dependencies
        run: poetry install
      - name: get latest version from VERSION file
        id: version
        run: echo "::set-output name=version::$(cat VERSION)"
      - name: get the last commit short hash
        id: commit
        run: echo "::set-output name=commit::$(git rev-parse --short HEAD)"
      - name: Build MkDocs with material insiders version
        id: material
        run: |
          pip install git+https://${INSIDERS_TOKEN}@github.com/squidfunk/mkdocs-material-insiders.git@${INSIDERS_VERSION}
          poetry run mkdocs build --clean --config-file mkdocs.insiders.yml --site-dir $SITE_DIR
        env:
          SITE_DIR: ${{ env.BRANCH_NAME }}
          SITE_URL: https://specs.anoma.net/${{ env.BRANCH_NAME }}/
          SITE_VERSION: ${{ steps.version.outputs.version }}-${{ steps.commit.outputs.commit }}
          COPYRIGHT: Powered by Mkdocs, Material ${{ env.INSIDERS_VERSION }} and
          Juvix ${{ env.JUVIX_VERSION }}
          
      - if: success()
        uses: JamesIves/github-pages-deploy-action@v4.6.4
        with:
          folder: ${{ env.BRANCH_NAME }}
          target-folder: ${{ env.BRANCH_NAME }}
          token: ${{ secrets.GITHUB_TOKEN }}
          clean: false
          git-config-name: Anoma Research
          git-config-email: arts@heliax.dev
  
  update-latest:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4.2.0
        with:
          submodules: true
          fetch-depth: 0
      - run: |
          git config --global user.name 'Anoma Research'
          git config --global user.email 'arts@heliax.dev'
      - name: Get the latest tag
        id: get-latest-tag
        run: |
          LATEST_TAG=$(git tag --sort=-v:refname | head -n 1)
          echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_ENV

      - name: Check and update latest folder
        run: |
          # Ensure we are in the gh-pages branch
          git fetch origin gh-pages
          git checkout gh-pages

          # Check if `lst` folder exists
          if [ ! -d "lst" ]; then
            echo "'lst' folder does not exist. Creating it."
            mkdir lst
          fi

          # Check if the lst tag folder exists
          if [ ! -d "$LATEST_TAG" ]; then
            echo "Folder for tag $LATEST_TAG does not exist. Exiting."
            exit 1
          fi

          # Check if the content of `lst` matches the lst tag
          if ! diff -qr "$LATEST_TAG" "lst" > /dev/null; then
            echo "Updating 'lst' folder with the content of $LATEST_TAG."
            rm -rf lst
            cp -r "$LATEST_TAG" lst
          else
            echo "'lst' folder is already up-to-date with $LATEST_TAG."
          fi

          # Stage, commit, and push changes
          git add lst
          git commit -m "Update 'lst' folder to $LATEST_TAG" || echo "No changes to commit."
          git push origin gh-pages
        env:
          LATEST_TAG: ${{ env.LATEST_TAG }}






